#!/bin/sh

set -e

if [ $# -ne 4 ]; then
  printf "./usb <default_route> <ip_address> /usr/share/zoneinfo/<timezone> /dev/disk/by-id/<usb_drive>\n" >&2
  exit 1
fi

ROUTE="$1"
ADDR="$2"
ZONE="$3"
USB="$4"

cd -- "$(dirname -- "$(readlink -f -- "$0")")"

die() {
  printf "usb: %s\n" "$*" >&2
  exit 1
}

if ! grep -q binfmt_misc /proc/mounts; then
  die "unsupported hardware"
fi

if [ ! -b "$USB" ]; then
  die "usb drive '$USB': not found"
fi

if [ ! -d rootfs ]; then
  die "directory 'rootfs': not found"
fi

if [ ! -x server ]; then
  die "script 'server': not found"
fi

if [ ! -d rootfs-zfs ]; then
  die "directory 'rootfs-zfs': not found"
fi

if [ ! -x server-zfs ]; then
  die "script 'server-zfs': not found"
fi

if [ -e /tmp/server ]; then
  die "directory '/tmp/server': already exists"
fi

set -x

# format

[ -b "${USB}-part1" ] && wipefs -a "${USB}-part1"
[ -b "${USB}-part2" ] && wipefs -a "${USB}-part2"
wipefs -fa "$USB"

printf ", 512M, c\n," | sfdisk "$USB"

udevadm settle

BOOTFS=$(blkid -o value -s PARTUUID "${USB}-part1")
ROOTFS=$(blkid -o value -s PARTUUID "${USB}-part2")

mkfs.vfat -F32 "${USB}-part1"
mkfs.xfs "${USB}-part2"

# mount

mkdir -p /tmp/server
mount -o noatime "${USB}-part2" /tmp/server

mkdir -p /tmp/server/boot
mount -o noatime "${USB}-part1" /tmp/server/boot

for _fs in dev proc sys; do
  mkdir -p /tmp/server/"$_fs"
  mount --rbind /"$_fs" /tmp/server/"$_fs"
  mount --make-rslave /tmp/server/"$_fs"
done

mkdir -p /tmp/server/tmp
mount -o nosuid,nodev -t tmpfs tmpfs /tmp/server/tmp

# void

mkdir -p /tmp/server/etc/xbps.d

printf "repository=https://repo-fastly.voidlinux.org/current/aarch64\n" > /tmp/server/etc/xbps.d/00-repository-main.conf

{
  printf "ignorepkg=linux\n"
  printf "ignorepkg=linux-headers\n"
} > /tmp/server/etc/xbps.d/xbps.conf

mkdir -p /tmp/server/var/db/xbps/keys
cp -f /var/db/xbps/keys/* /tmp/server/var/db/xbps/keys/

XBPS_ARCH=aarch64-musl xbps-install -Syu -R https://repo-fastly.voidlinux.org/current/aarch64 -r /tmp/server \
  base-voidstrap \
  rpi-firmware \
  rpi-kernel \
  rpi-kernel-headers \
  rng-tools \
  chrony \
  rsync \
  tree \
  curl \
  nano \
  htop \
  bottom \
  pfetch \
  neofetch

ln -sf /etc/sv/rngd /tmp/server/etc/runit/runsvdir/default/
ln -sf /etc/sv/ntpd /tmp/server/etc/runit/runsvdir/default/
ln -sf /etc/sv/sshd /tmp/server/etc/runit/runsvdir/default/

sed -i "s/#DKMS_JOBS=/DKMS_JOBS=2/g" /etc/default/dkms

sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /tmp/server/etc/ssh/sshd_config

printf "root:voidlinux\n" | chroot /tmp/server /bin/chpasswd -c SHA512

printf "server\n" > /tmp/server/etc/hostname

ln -sf "$ZONE" /tmp/server/etc/localtime

{
  printf "nameserver 1.1.1.1\n"
  printf "nameserver 1.0.0.1\n"
} > /tmp/server/etc/resolv.conf

{
  printf "\n"
  printf "ip link set dev eth0 up\n"
  printf "ip addr add %s/24 brd + dev eth0\n" "$ADDR"
  printf "ip route add default via %s\n" "$ROUTE"

  printf "\n"
  printf "printf 0 > /sys/class/leds/ACT/brightness\n"
  printf "printf 0 > /sys/class/leds/PWR/brightness\n"
} >> /tmp/server/etc/rc.local

{
  printf "PARTUUID=%s / xfs noatime 0 1\n" "$ROOTFS"
  printf "PARTUUID=%s /boot vfat noatime 0 2\n" "$BOOTFS"
} >> /tmp/server/etc/fstab

sed -i "s|root=/dev/mmcblk0p2|root=PARTUUID=$ROOTFS net.ifnames=0|g" /tmp/server/boot/cmdline.txt

printf "disable_splash=1\n" >> /tmp/server/boot/config.txt

# copy

rsync -aAX --inplace --chown=root:root ./ /tmp/server/root/ # server files

# unmount

sync

umount -R /tmp/server

rmdir /tmp/server
